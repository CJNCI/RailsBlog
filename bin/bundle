#!/usr/bin/env ruby
# frozen_string_literal: true

#
# This file was generated by Bundler.
#
# The application 'bundle' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

m = Module.new do
  module_function

  def invoked_as_script?
    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
  end

  def env_var_version
    ENV['BUNDLER_VERSION']
  end

  def updating_bundle?
    'update'.start_with?(ARGV.first || ' ')
  end

  def parse_bundler_version
    bundler_version = nil
    update_index = nil
    ARGV.each_with_index do |arg, index|
      bundler_version = extract_version(arg, index, update_index) || bundler_version
      update_index = update_index_for(arg, index) || update_index
    end
    bundler_version
  end

  def extract_version(arg, index, update_index)
    if update_index && update_index.succ == index && arg.match?(Gem::Version::ANCHORED_VERSION_PATTERN)
      arg
    elsif arg =~ bundler_pattern
      Regexp.last_match(1)
    end
  end

  def update_index_for(arg, index)
    index if arg =~ bundler_pattern
  end

  def bundler_pattern
    /\A--bundler(?:[= ](#{Gem::Version::VERSION_PATTERN}))?\z/
  end

  def cli_arg_version
    return unless invoked_as_script? # don't want to hijack other binstubs
    return unless updating_bundle?

    parse_bundler_version
  end

  def gemfile
    gemfile = ENV['BUNDLE_GEMFILE']
    return gemfile if gemfile && !gemfile.empty?

    File.expand_path('../Gemfile', __dir__)
  end

  def lockfile
    lockfile =
      case File.basename(gemfile)
      when 'gems.rb' then gemfile.sub(/\.rb$/, '.locked')
      else "#{gemfile}.lock"
      end
    File.expand_path(lockfile)
  end

  def lockfile_version
    return unless File.file?(lockfile)

    lockfile_contents = File.read(lockfile)
    return unless lockfile_contents =~ /\n\nBUNDLED WITH\n\s{2,}(#{Gem::Version::VERSION_PATTERN})\n/

    Regexp.last_match(1)
  end

  def bundler_requirement
    @bundler_requirement ||=
      env_var_version ||
      cli_arg_version ||
      bundler_requirement_for(lockfile_version)
  end

  def bundler_requirement_for(version)
    return "#{Gem::Requirement.default}.a" unless version

    bundler_gem_version = Gem::Version.new(version)

    bundler_gem_version.approximate_recommendation
  end

  def load_bundler!
    ENV['BUNDLE_GEMFILE'] ||= gemfile

    activate_bundler
  end

  def activate_bundler
    gem_error = handle_activation_error
    return if gem_error.nil?

    handle_require_error(gem_error)
  end

  def handle_activation_error
    activation_error_handling { gem 'bundler', bundler_requirement }
  end

  def handle_require_error(gem_error)
    require_error = activation_error_handling { require 'bundler/version' }
    return if valid_bundler?(require_error)

    warn_bundler_activation_failed(gem_error)
    exit 42
  end

  def valid_bundler?(require_error)
    require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
  end

  def warn_bundler_activation_failed(gem_error)
    warn "Activating bundler (#{bundler_requirement}) failed:\n#{gem_error.message}\n\nTo install the version of bundler this project requires, run `gem install bundler -v '#{bundler_requirement}'`"
  end

  def activation_error_handling
    yield
    nil
  rescue StandardError, LoadError => e
    e
  end
end

m.load_bundler!

load Gem.bin_path('bundler', 'bundle') if m.invoked_as_script?
